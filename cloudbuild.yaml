# This file instructs Cloud Build on how to build and deploy the application.
# It is triggered automatically when you push to your connected GitHub repository.
steps:
  # 1. Build the container image using the Dockerfile.
  # The image is tagged with the region, project ID, and other variables
  # that will be substituted by the Cloud Build trigger.
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_NAME}:latest', '.']

  # 2. Push the container image to Google Artifact Registry.
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_NAME}:latest']

  # 3. Deploy the new container image to Google Cloud Run.
  # This step uses the gcloud command-line tool, similar to your deploy.sh script.
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image=${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_NAME}:latest'
      - '--region=${_REGION}'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--service-account=${_RUN_SERVICE_ACCOUNT_NAME}@$PROJECT_ID.iam.gserviceaccount.com'
      - '--add-cloudsql-instances=$PROJECT_ID:${_REGION}:${_SQL_INSTANCE_NAME}'
      - '--set-env-vars=DB_USER=${_DB_USER},DB_NAME=${_DB_NAME},GCS_BUCKET_NAME=${_GCS_BUCKET},INSTANCE_CONNECTION_NAME=$PROJECT_ID:${_REGION}:${_SQL_INSTANCE_NAME}'
      - '--set-secrets=DB_PASS=DB_PASS:latest,FLASK_SECRET_KEY=FLASK_SECRET_KEY:latest'

# This final section lists the images that were built, making them available for deployment.
images:
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_NAME}:latest'